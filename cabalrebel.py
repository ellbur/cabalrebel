
from setuptools import setup
from setuptools.command.install import install as default_install

def cabal_install(name, license, author, maintainer, category, modules, linker_args=[]):
    from scooter import BuildHere, dirof, easyrun, p

    here = p('.')
    
    build = BuildHere(here)
    
    setup = here/'Setup.hs'
    setup.set('''
        import Distribution.Simple
        main = defaultMain
    ''')
    setup.delete_at_exit()

    cabal_file = here/(here.dir.name + '.cabal')
    cabal_file.set('''
        -- Initial haskell-hangul.cabal generated by cabal init.  For further 
        -- documentation, see http://haskell.org/cabal/users-guide/

        name:                {name}
        version:             0.1.0.0
        -- synopsis:            
        -- description:         
        license:             {license}
        license-file:        LICENSE
        author:              {author}
        maintainer:          {maintainer}
        -- copyright:           
        category:            {category}
        build-type:          Custom
        cabal-version:       >=1.8

        library
          exposed-modules:     {modules}
          -- other-modules:       
          build-depends:       base ==4.6.*
    '''.format(
        name = name,
        license = license,
        author = author,
        maintainer = maintainer,
        category = category,
        modules = ', '.join(modules)
    ))
    cabal_file.delete_at_exit()
    
    build.easyrun('runghc', here/'Setup.hs', 'configure', '--user')
    build.easyrun('runghc', here/'Setup.hs', 'build', '--ld-options=' + ','.join(map(str, linker_args)))
    
    easyrun('runghc', here/'Setup.hs', 'install')

def CabalInstall(name, license, author, maintainer, category, modules, linker_args=[]):
    class Impl(default_install):
        def run(self):
            default_install.do_egg_install(self)
            cabal_install(name=name, license=license, author=author, maintainer=maintainer,
                  category=category, modules=modules, linker_args=linker_args)
            
    return Impl

